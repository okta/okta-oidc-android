apply plugin: "com.android.application"
apply from: "${rootDir}/gradle/android-common.gradle"
apply from: "${rootDir}/gradle/style.gradle"

android {
    defaultConfig {
        minSdkVersion 19
        compileSdkVersion 28
        applicationId "com.okta.oidc.example"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }
        Boolean travis = System.getenv("TRAVIS") == "true"
        String manifestScheme = properties.getProperty('test.scheme', '""')
        buildConfigField "String", "USERNAME_MFA", travis ? '""' : properties.getProperty('mfa.username', '""')
        buildConfigField "String", "PASSWORD_MFA", travis ? '""' : properties.getProperty('mfa.password', '""')
        buildConfigField "String", "USERNAME", travis ? '""' : properties.getProperty('test.username', '""')
        buildConfigField "String", "PASSWORD", travis ? '""' : properties.getProperty('test.password', '""')
        buildConfigField "String", "PINCODE", travis ? '""' : properties.getProperty('test.pincode', '""')
        buildConfigField "String", "CLIENT_ID", travis ? '""' : properties.getProperty('test.clientId', '""')
        buildConfigField "String", "REDIRECT_URI", travis ? '""' : properties.getProperty('test.redirectUri', '""')
        buildConfigField "String", "END_SESSION_URI", travis ? '""' : properties.getProperty('test.endSessionUri', '""')
        buildConfigField "String[]", "SCOPES", travis ? "{}" : ("{" + properties.getProperty('test.scopes', '""') + "}")
        buildConfigField "String", "DISCOVERY_URI", travis ? '""' : properties.getProperty('test.discoveryUri', '""')

        // Make sure this is consistent with the redirect URI used in
        // res/raw/okta_oidc_config
        manifestPlaceholders = [
                "appAuthRedirectScheme": manifestScheme
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    implementation project(':library')
    implementation "androidx.fragment:fragment:${rootProject.browserVersion}"
    implementation 'androidx.annotation:annotation:' + rootProject.androidxLibVersion
    implementation "androidx.appcompat:appcompat:1.0.2"

    implementation "com.google.android.material:material:${rootProject.appcompatVersion}"
    implementation 'com.okta.authn.sdk:okta-authn-sdk-api:0.3.0'
    implementation 'com.okta.authn.sdk:okta-authn-sdk-impl:0.3.0'
    implementation 'com.okta.sdk:okta-sdk-okhttp:1.4.1'
    androidTestImplementation "androidx.browser:browser:${rootProject.browserVersion}"
    // Core library
    androidTestImplementation 'androidx.test:core:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.ext:truth:1.1.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.1'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.1'

    // UiAutomator Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:' + rootProject.uiautomatorVersion
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'

    androidTestImplementation 'com.github.tomakehurst:wiremock-standalone:2.21.0'

    androidTestImplementation "io.jsonwebtoken:jjwt-api:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation "io.jsonwebtoken:jjwt-impl:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation "io.jsonwebtoken:jjwt-jackson:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation("io.jsonwebtoken:jjwt-orgjson:${rootProject.jsonWebTokenVersion}") {
        exclude group: 'org.json', module: 'json'
    }
}

def adb = System.getenv("ANDROID_HOME") + "/platform-tools/adb"
task prepareDeviceForUITesting(type: Exec) {
    //disable animations for testing
    commandLine adb, 'shell', 'settings', 'put', 'global', 'window_animation_scale', '0'
    commandLine adb, 'shell', 'settings', 'put', 'global', 'transition_animation_scale', '0'
    commandLine adb, 'shell', 'settings', 'put', 'global', 'animator_duration_scale', '0'
    //always finish activity
    commandLine adb, 'shell', 'settings', 'put', 'global', 'always_finish_activities', '1'
    // push keystore file to sdcard
    commandLine adb, 'push', 'src/androidTest/assets/mock.keystore.bks', '/sdcard/Download/'
}

task clearData(type: Exec) {
    commandLine adb, 'shell', 'pm', 'clear', 'com.okta.oidc.example'
    commandLine adb, 'shell', 'pm', 'clear', 'com.okta.oidc.example.test'
    commandLine adb, 'shell', 'pm', 'clear', 'com.android.chrome'
}

task restoreDeviceSettings(type: Exec) {
    //enable animations for testing
    commandLine adb, 'shell', 'settings', 'put', 'global', 'window_animation_scale', '1'
    commandLine adb, 'shell', 'settings', 'put', 'global', 'transition_animation_scale', '1'
    commandLine adb, 'shell', 'settings', 'put', 'global', 'animator_duration_scale', '1'
    //disable finish activity
    commandLine adb, 'shell', 'settings', 'put', 'global', 'always_finish_activities', '0'
    // remove keystore file to sdcard
    commandLine adb, 'shell', 'rm', '/sdcard/Download/mock.keystore.bks'
}

dependencyCheck {
    suppressionFile file("../dependency-suppression.xml").toString()
}