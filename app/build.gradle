apply plugin: "com.android.application"
apply from: "${rootDir}/gradle/android-common.gradle"
apply from: "${rootDir}/gradle/style.gradle"

android {
    defaultConfig {
        minSdkVersion 24
        compileSdkVersion 28
        applicationId "com.okta.oidc.example"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // Make sure this is consistent with the redirect URI used in
        // res/raw/okta_oidc_config
        manifestPlaceholders = [
                "appAuthRedirectScheme": "com.oktapreview.samples-test"
        ]
        multiDexEnabled true

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def username = properties.getProperty('test.username')
        def password = properties.getProperty('test.password')
        if (username == null || password == null) {
            username = password = "";
        }
        buildConfigField "String", "USERNAME", username
        buildConfigField "String", "PASSWORD", password
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
}

dependencies {
    implementation project(':library')
    implementation "androidx.fragment:fragment:${rootProject.browserVersion}"
    implementation 'androidx.annotation:annotation:' + rootProject.androidxLibVersion
    implementation "androidx.appcompat:appcompat:1.0.2"

    implementation "com.google.android.material:material:${rootProject.appcompatVersion}"
    implementation 'com.okta.authn.sdk:okta-authn-sdk-api:0.3.0'
    implementation 'com.okta.authn.sdk:okta-authn-sdk-impl:0.3.0'
    implementation 'com.okta.sdk:okta-sdk-okhttp:1.4.1'
    androidTestImplementation "androidx.browser:browser:${rootProject.browserVersion}"
    // Core library
    androidTestImplementation 'androidx.test:core:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.ext:truth:1.1.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.1'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.1'

    // UiAutomator Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:' + rootProject.uiautomatorVersion
    androidTestImplementation 'org.hamcrest:hamcrest-integration:1.3'

    androidTestImplementation 'com.github.tomakehurst:wiremock-standalone:2.21.0'

    androidTestImplementation "io.jsonwebtoken:jjwt-api:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation "io.jsonwebtoken:jjwt-impl:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation "io.jsonwebtoken:jjwt-jackson:${rootProject.jsonWebTokenVersion}"
    androidTestImplementation("io.jsonwebtoken:jjwt-orgjson:${rootProject.jsonWebTokenVersion}") {
        exclude group: 'org.json', module: 'json'
    }
}

task prepareDeviceForUITesting(type: Exec) {
    //disable animations for testing
    def anim_window = ['adb', 'shell', 'settings', 'put', 'global', 'window_animation_scale', '0']
    def anim_transition = ['adb', 'shell', 'settings', 'put', 'global', 'transition_animation_scale', '0']
    def animator = ['adb', 'shell', 'settings', 'put', 'global', 'animator_duration_scale', '0']

    // Enable Don't keep activities
    def dont_keep_activities = ['adb', 'shell', 'settings', 'put', 'global', 'always_finish_activities', '1']

    // push keystore file to sdcard
    def keystore_file = ['adb', 'push', 'src/androidTest/assets/mock.keystore.bks', '/sdcard/Download/' ]

    commandLine anim_window
    commandLine anim_transition
    commandLine animator
    commandLine dont_keep_activities
    commandLine keystore_file
}

task clearData(type: Exec) {
    def clearAppData = ['adb', 'shell', 'pm', 'clear', 'com.okta.oidc.example']
    def clearTestAppData = ['adb', 'shell', 'pm', 'clear', 'com.okta.oidc.example.test']
    def clearChromeData = ['adb', 'shell', 'pm', 'clear', 'com.android.chrome']

    commandLine clearAppData
    commandLine clearTestAppData
    commandLine clearChromeData
}

dependencyCheck {
    suppressionFile file("../dependency-suppression.xml").toString()
}